{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#install","title":"Install","text":"<p>To install DeltaBase, run the following command: <pre><code>pip install deltabase\n</code></pre></p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from deltabase import delta\n\n# connect to a delta source\ndb:delta = delta.connect(path=\"mydelta\")\n\n# upsert records into a table \ndb.upsert(table=\"mytable\", primary_key=\"id\", data=[\n    {\"id\": 1, \"name\": \"alice\"}\n])\n\n# commit table to delta source\ndb.commit(table=\"mytable\")\n\n# read records from sql context\nresult = db.sql(\"select * from mytable\")\nprint(result) # output: [{\"id\": 1, \"name\": \"alice\"}]\n</code></pre>"},{"location":"checkout/","title":"Checkout","text":"<p>To revert to a previous version of a table, use the <code>checkout</code> method. This allows you to load historical data or restore a previous state.</p> <pre><code>db.checkout(database=\"mydatabase\", table=\"mytable\", version=1)\ndb.checkout(database=\"mydatabase\", table=\"mytable\", version=\"2024-01-01\")\ndb.checkout(database=\"mydatabase\", table=\"mytable\", version=datetime(2024, 1, 1))\n</code></pre>"},{"location":"commit/","title":"Commit","text":"<p>To persist changes made in the SQL context back to the delta source, use the <code>commit</code> method. You can enforce schema changes or partition your data during the commit process.</p> <pre><code>db.commit(database=\"mydatabase\", table=\"mytable\")\n</code></pre> <p><code>db.commit(..., force=True)</code></p> <p>Force schema changes when committing data to the delta source.</p> <p><code>db.commit(..., partition_by=[\"job\"])</code></p> <p>Partition the table by one or more columns when committing data.</p>"},{"location":"configure/","title":"Configure","text":"<p>You can configure the Delta instance to output different data formats by setting the <code>dtype</code> attribute of the configuration object. The default format is <code>json</code>, but you can change it to <code>polars</code> for better performance or other formats as needed.</p> <pre><code>from deltabase import delta\n\ndb:delta = delta.connect(path=\"local_path/mydelta\")\ndb.config.dtype = \"polars\"\n</code></pre>"},{"location":"connect/","title":"Connect","text":"<p>To connect to a delta source instance, use the <code>connect</code> method provided by the <code>delta</code> class. This method allows you to connect to either a local file path or a remote cloud storage service (such as AWS S3, Azure Data Lake, or Google Cloud Storage). The method returns an instance of the <code>delta</code> class, which you can use to manage your Delta tables.</p> <pre><code>from deltabase import delta\n\ndb:delta = delta.connect(path=\"local_path/mydelta\")\n</code></pre> <p>on connect, delta will attempt to load tables if path is local.</p> <p><code>db:delta = delta.connect(path=\"s3://&lt;bucket&gt;\")</code></p> <p>You can also connect to a delta source stored in an AWS S3 bucket. Replace <code>&lt;bucket&gt;</code> with the actual bucket name and path.</p> <p><code>db:delta = delta.connect(path=\"&lt;az|adl|abfs[s]&gt;://&lt;container&gt;\")</code></p> <p>For Azure, you can connect to an Azure Data Lake Storage (ADLS) or Azure Blob Storage using the appropriate URI scheme (<code>az://</code>, <code>adl://</code>, or <code>abfs[s]://</code>).</p> <p><code>db:delta = delta.connect(path=\"gs://&lt;bucket&gt;\")</code></p> <p>For Google Cloud Storage, use the <code>gs://</code> prefix followed by the bucket name and path.</p>"},{"location":"delete/","title":"Delete","text":"<p>To delete records from a table or remove a table from the SQL context, use the <code>delete</code> method. You can delete specific records based on a condition or remove all records.</p> <pre><code># delete records with sql condition\ndb.delete(table=\"mytable\", filter=\"name='bob'\")\n\n# delete records using a lambda function\ndb.delete(table=\"mytable\", filter=lambda row: row[\"name\"] == \"sam\")\n\n# delete table from sql context\ndb.delete(table=\"mytable\")\n</code></pre>"},{"location":"errors/","title":"Errors","text":"<p>If any errors occur during operations, they are returned by the methods as exceptions. Handle these exceptions to debug or manage issues in your workflows.</p> <pre><code>try:\n    db.commit(database=\"mydatabase\", table=\"mytable\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"register/","title":"Register","text":"<p>To load or register a table in the SQL context from a delta source, use the <code>register</code> method. You can register tables from the delta source, load a specific version, or register a DataFrame or LazyFrame directly.</p> <p>Register a table from a specific database in the delta source:</p> <pre><code>db.register(database=\"mydatabase\", table=\"mytable\")\n</code></pre> <p><code>db.register(..., alias=\"table\")</code></p> <p>You can assign an alias to the registered table within the SQL context for easier reference.</p> <p><code>db.register(..., version=1)</code></p> <p>Load a specific version of the table by specifying the version number.</p> <p><code>db.register(..., data=...)</code></p> <p>Register a DataFrame or LazyFrame directly instead of loading it from the Delta source.</p> <p><code>db.register(..., pyarrow_options={\"partitions\": [(\"year\", \"=\", \"2021\")]})</code></p> <p>Use <code>pyarrow_options</code> to specify partition filters or other advanced options when loading the table.</p>"},{"location":"sql_context/","title":"SQL Context","text":"<p>You can run SQL queries against your registered tables using the <code>sql</code> method. This allows you to interact with your data using standard SQL syntax.</p> <pre><code>db.sql(\"select * from mytable\")\n</code></pre> <p><code>db.sql(\"select * from mytable\", dtype=\"polars\")</code></p> <p>You can specify the output format of the query using the <code>dtype</code> parameter, such as <code>polars</code> for fast data processing.</p> <p><code>db.sql(\"select * from mytable\", lazy=True)</code></p> <p>If you prefer to defer execution, you can return a LazyFrame by setting the <code>lazy</code> parameter to <code>True</code>.</p>"},{"location":"upsert/","title":"Upsert","text":"<p>To insert new records or update existing records in a table, use the <code>upsert</code> method. This method allows you to keep your data synchronized while managing schema changes automatically.</p> <p>Insert or update a single record:</p> <pre><code>db.upsert(database=\"mydatabase\", table=\"mytable\", primary_key=\"id\", data={\n    \"id\": 1, \n    \"name\": \"alice\"\n})\n</code></pre> <p>Insert or update multiple records at once:</p> <pre><code>db.upsert(database=\"mydatabase\", table=\"mytable\", primary_key=\"id\", data=[\n    {\"id\": 1, \"name\": \"ali\"},\n    {\"id\": 2, \"name\": \"bob\", \"job\": \"chef\"},\n    {\"id\": 3, \"name\": \"sam\"},\n])\n</code></pre> <p><code>db.upsert(..., data=DataFrame([{\"id\": 1, \"name\": \"ali\"}]))</code></p> <p>You can upsert data directly from a DataFrame.</p> <p><code>db.upsert(..., data=LazyFrame([{\"id\": 1, \"name\": \"ali\"}]))</code></p> <p>Or, upsert data using a LazyFrame for more efficient operations.</p>"}]}